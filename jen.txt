pipeline {
    agent any
    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials' // DockerHub credentials ID
        NODE_ENV = 'production' // Node.js environment
    }
    stages {
        stage('Checkout Code') {
            steps {
                // Clone the repository
                checkout scm
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    script {
                        def nodejs = tool name: 'NodeJS', type: 'jenkins.plugins.nodejs.tools.NodeJSInstallation'
                        env.PATH = "${nodejs}\\bin;${env.PATH}"
                    }
                    // Use 'bat' for Windows commands
                    bat 'npm install'
                    bat 'npm run lint'
                    bat 'npm test'
                    bat 'docker build -t backend-app .'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    script {
                        def nodejs = tool name: 'NodeJS', type: 'jenkins.plugins.nodejs.tools.NodeJSInstallation'
                        env.PATH = "${nodejs}\\bin;${env.PATH}"
                    }
                    // Use 'bat' for Windows commands
                    bat 'npm install'
                    bat 'npm run build'
                    bat 'docker build -t frontend-app .'
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                withDockerRegistry([credentialsId: "${DOCKER_CREDENTIALS_ID}", url: '']) {
                    // Push backend image
                    bat 'docker tag backend-app your-dockerhub-username/backend-app:latest'
                    bat 'docker push your-dockerhub-username/backend-app:latest'

                    // Push frontend image
                    bat 'docker tag frontend-app your-dockerhub-username/frontend-app:latest'
                    bat 'docker push your-dockerhub-username/frontend-app:latest'
                }
            }
        }

        stage('Deploy Application') {
            steps {
                // Use 'bat' to run Docker Compose on Windows
                bat 'docker-compose up -d --build'
            }
        }
    }
    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Application built and deployed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}

//update frontend docker file proxy setting
FROM node:20.10-alpine

WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Update NPM, set faster registry, and configure timeout
#Sometimes, the default NPM registry (https://registry.npmjs.org/) can be slow or unreachable. Switch to a faster mirror like the yarnpkg registry by adding this command in your Dockerfile before npm install
RUN npm install -g npm@latest
RUN npm config set registry https://registry.yarnpkg.com/
RUN npm config set timeout 300000

# Install dependencies with retry logic
RUN npm install || npm install || npm install

# Copy the rest of the application code
COPY . .

# Build the React app
RUN npm run build

# Serve the app using Nginx
FROM nginx:alpine
COPY --from=0 /app/build /usr/share/nginx/html

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

