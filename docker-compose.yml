version: '3.8'

services:
  backend:
    build:
      context: ./backend  # Path to your backend app's Dockerfile
    container_name: air-ticket-backend
    ports:
      - "5000:5000"  # Backend runs on port 5000
    environment:
      - MONGO_URI=mongodb+srv://air:air@airplane.wwvwd.mongodb.net/?retryWrites=true&w=majority&appName=Airplane
    volumes:
      - ./backend:/app  # Mount the backend source code as a volume

  frontend:
    build:
      context: ./frontend  # Path to your frontend app's Dockerfile
    container_name: air-ticket-frontend
    ports:
      - "3000:3000"  # The frontend app runs on port 3000
    volumes:
      - ./frontend:/app  # Mount the frontend source code as a volume
    depends_on:
      - backend  # Frontend depends on Backend service being up
    stdin_open: true  # Enable container inside terminal
    tty: true          # Enable pseudo-TTY

  # Prometheus Service
  prometheus:
    image: prom/prometheus:latest  # Use the latest Prometheus image
    container_name: prometheus     # Name of the Prometheus container
    volumes:
      # Mount prometheus.yml configuration file into the container
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      # Map port 9090 on the host to port 9090 on the container
      - "9090:9090"

  # Node Exporter Service (Collect system-level metrics)
  node-exporter:
    image: prom/node-exporter:latest  # Use the latest Node Exporter image
    container_name: node_exporter     # Name of the Node Exporter container
    ports:
      # Map port 9100 on the host to port 9100 on the container
      - "9100:9100"

  # Grafana Service
  grafana:
    image: grafana/grafana:latest  # Use the latest Grafana image
    container_name: grafana        # Name of the Grafana container
    ports:
      # Map port 3001 on the host to port 3000 on the container (default Grafana port)
      - "3001:3000"
    volumes:
      # Persist Grafana data to avoid losing dashboards and configurations
      - grafana-data:/var/lib/grafana
    environment:
      # Set Grafana admin credentials
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

# Define Docker volumes for persistent data
volumes:
  grafana-data:  # Volume for Grafana to store persistent data